from .oracle import conectar


def inserir_no_banco(agrotech: dict):
    """
    Insere uma nova agrotech no banco de dados.
    
    Args:
        agrotech (dict): Dicionário com os dados da agrotech a serem inseridos.
            Deve conter as chaves "nome", "estado" e "segmento".
    """
    connection = conectar()
    if connection is None:
        print("Erro ao conectar ao banco. Dados não foram inseridos.")
        return

    cursor = connection.cursor()

    try:
        sql = """
        INSERT INTO AGROTECHS (NOME, ESTADO, SEGMENTO)
        VALUES (:1, :2, :3)
        """
        cursor.execute(
            sql, (agrotech["nome"], agrotech["estado"], agrotech["segmento"])
        )
        connection.commit()

        print("Agrotech inserido com sucesso.")
    except Exception as e:
        print(f"Erro ao inserir no banco: {e}")
        connection.rollback()

    finally:
        cursor.close()
        connection.close()

def buscar_no_banco_por_estado(estado: str):
    """
    Busca agrotechs por estado no banco de dados.

    Args:
        estado (str): Estado para filtrar as agrotechs.

    Returns:
        list: Lista de dicionários com os dados das agrotechs encontradas.
    """
    connection = conectar()
    if connection is None:
        print("Erro ao conectar ao banco. Dados não foram buscados.")
        return []

    cursor = connection.cursor()

    try:
        sql = """
        SELECT NOME, ESTADO, SEGMENTO
        FROM AGROTECHS
        WHERE ESTADO = :1
        """
        cursor.execute(sql, (estado,))
        rows = cursor.fetchall()

        agrotechs = []
        for row in rows:
            agrotech = {
                "nome": row[0],
                "estado": row[1],
                "segmento": row[2],
            }
            agrotechs.append(agrotech)

        return agrotechs

    except Exception as e:
        print(f"Erro ao buscar no banco: {e}")
        return []

    finally:
        cursor.close()
        connection.close()


def criar_tabela_se_nao_existir():
    connection = conectar()
    with connection.cursor() as cursor:
        cursor.execute("""
            SELECT COUNT(*) 
            FROM user_tables 
            WHERE table_name = 'AGROTECHS'
        """)
        tabela_existe = cursor.fetchone()[0] > 0

        if not tabela_existe:
            sql = """
                CREATE TABLE AGROTECHS (
                    ID         NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
                    NOME       VARCHAR2(100) NOT NULL,
                    ESTADO     VARCHAR2(2)   NOT NULL,
                    SEGMENTO   VARCHAR2(100) NOT NULL
                )
            """
            cursor.execute(sql)
            connection.commit()
            print("Tabela AGROTECHS criada com sucesso.")
        else:
            print("Tabela AGROTECHS já existe.")